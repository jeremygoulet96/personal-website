/**
 * -----------------
 * TABLE OF CONTENTS
 * -----------------
 * LIB -------------
 ** Normalize
 * UTILITIES
 ** Mixins
 ** Colors
 ** Variables
 ** Media Queries
 * BASE ------------
 ** Typo
 ** Button
 ** Form
 * MODULES ---------
 ** Nav
 ** Header
 ** Footer
 ** Work
 ** About me
 * GENERAL ---------
 ** Base
 */
/****** LIB ******/
/****** UTILITIES ******/
/**
 * --------------------------
 * TABLE OF CONTENTS - MIXINS
 * --------------------------
 * Base (BoxSizing, Clearfix)
 * Accessibility
 * Typography
 */
/******** Base (BoxSizing, Clearfix) *********/
/******** Accessibility *********/
/******** Typography *********/
/****** COLORS ******/
/****** VARIABLES ******/
/****** MEDIA QUERIES ******/
a.icon {
  display: block;
  font-size: 0;
  background: center no-repeat;
}

a.icon--hamburger {
  background-image: url(../images/icons/hamburger.svg);
}

a.icon--close {
  background-image: url(../images/icons/close.svg);
}

svg.icon {
  display: block;
}

svg.icon--twitter:hover {
  fill: #00AAEC;
}

svg.icon--dribbble:hover {
  fill: #EC4989;
}

svg.icon--github:hover {
  fill: #3E75C3;
}

svg.icon--instagram:hover {
  fill: #EF307C;
}

svg.icon--linkedin:hover {
  fill: #007EBB;
}

/****** BASE ******/
/****** TYPOGRAPHY ******/
@font-face {
  font-family: 'Avenir Next';
  src: url("../fonts/AvenirNext/AvenirNext-Regular.woff2") format("woff2"), url("../fonts/AvenirNext/AvenirNext-Regular.woff") format("woff");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'Avenir Next';
  src: url("../fonts/AvenirNext/AvenirNext-Italic.woff2") format("woff2"), url("../fonts/AvenirNext/AvenirNext-Italic.woff") format("woff");
  font-weight: normal;
  font-style: italic;
}

@font-face {
  font-family: 'Avenir Next';
  src: url("../fonts/AvenirNext/AvenirNext-Medium.woff2") format("woff2"), url("../fonts/AvenirNext/AvenirNext-Medium.woff") format("woff");
  font-weight: 500;
  font-style: normal;
}

@font-face {
  font-family: 'Avenir Next';
  src: url("../fonts/AvenirNext/AvenirNext-DemiBold.woff2") format("woff2"), url("../fonts/AvenirNext/AvenirNext-DemiBold.woff") format("woff");
  font-weight: 600;
  font-style: normal;
}

@font-face {
  font-family: 'Avenir Next';
  src: url("../fonts/AvenirNext/AvenirNext-DemiBoldItalic.woff2") format("woff2"), url("../fonts/AvenirNext/AvenirNext-DemiBoldItalic.woff") format("woff");
  font-weight: 600;
  font-style: italic;
}

@font-face {
  font-family: 'Avenir Next';
  src: url("../fonts/AvenirNext/AvenirNext-Bold.woff2") format("woff2"), url("../fonts/AvenirNext/AvenirNext-Bold.woff") format("woff");
  font-weight: bold;
  font-style: normal;
}

/****** BUTTONS ******/
.button {
  display: inline-block;
  background: linear-gradient(-180deg, #E4E4E4 0%, #D3D3D3 100%);
  border-radius: 7px;
  padding: 1rem;
  box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.08), 0 1px 1px 0 rgba(0, 0, 0, 0.08), inset 0 -2px 2px 0 rgba(0, 0, 0, 0.1);
  color: #252525;
  text-decoration: none;
  font-family: Avenir Next, Avenir, "Avenir Next", -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  border: 0;
  font-weight: 600;
  font-size: 1rem;
  text-align: center;
  margin-bottom: 0.5rem;
  flex-grow: 1;
  flex-basis: 0;
  cursor: pointer;
  outline: 0;
  transition: all 0.2s ease;
}

.button:nth-of-type(2) {
  margin-left: 0.5rem;
}

.button:hover, .button:focus {
  box-shadow: 0 6px 8px 0 rgba(0, 0, 0, 0.12), 0 2px 4px 0 rgba(0, 0, 0, 0.08), inset 0 -2px 2px 0 rgba(0, 0, 0, 0.1);
  transform: translateY(-1px);
}

.button:active {
  box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.15);
  background: linear-gradient(0deg, #E1E1E1 0%, #CBCBCB 100%);
}

/****** FORM ******/
form.form {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}

form.form label.form__label {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

form.form label.form__label.focusable:active, form.form label.form__label.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

form.form div.inputContainer {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

form.form div.inputContainer input.form__input:nth-of-type(1), form.form div.inputContainer textarea:nth-of-type(1) {
  margin-right: 0.5rem;
}

form.form input.form__input, form.form textarea {
  width: 100%;
  font-family: Avenir Next, Avenir, "Avenir Next", -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  display: inline-block;
  background: #fff;
  border-radius: 7px;
  padding: 1rem;
  box-shadow: inset 0 2px 2px 0 rgba(0, 0, 0, 0.1);
  border: 1px solid #C8C8C8;
  color: #252525;
  font-weight: 500;
  font-size: 1rem;
  margin-bottom: 0.5rem;
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  transition: all 0.2s ease;
}

form.form input.form__input:focus, form.form textarea:focus {
  border-color: #53BCFF;
  box-shadow: inset 0 2px 2px 0 rgba(83, 188, 255, 0.3);
}

form.form textarea {
  min-height: 100px;
}

form.form ::-webkit-input-placeholder {
  /* Chrome/Opera/Safari */
  color: #9A9A9A;
}

form.form ::-moz-placeholder {
  /* Firefox 19+ */
  color: #9A9A9A;
}

form.form :-ms-input-placeholder {
  /* IE 10+ */
  color: #9A9A9A;
}

form.form :-moz-placeholder {
  /* Firefox 18- */
  color: #9A9A9A;
}

/****** MODULES ******/
/****** NAV ******/
nav.nav {
  padding: 1.2rem 0;
  box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);
  width: 100%;
  overflow: hidden;
  transition: all 0.2s ease;
}

@media (min-width: 1000px) {
  nav.nav {
    width: auto;
  }
}

nav.nav ul.nav__list {
  display: flex;
  justify-content: space-between;
  transition: all 0.2s ease;
}

nav.nav ul.nav__list form:before {
  content: "|";
  display: inline-block;
  margin-right: 1rem;
}

nav.nav ul.nav__list .nav__link {
  color: #252525;
  text-decoration: none;
  transition: all 0.2s ease;
}

nav.nav ul.nav__list .nav__link--lang {
  background: none;
  box-shadow: none;
  border: 0;
  font-size: 1rem;
  outline: 0;
}

nav.nav ul.nav__list .nav__link--lang:hover {
  cursor: pointer;
}

nav.nav ul.nav__list .nav__link--active {
  font-weight: 600;
  text-decoration: underline;
}

nav.nav ul.nav__list .nav__link:hover {
  opacity: 0.5;
}

/****** HEADER ******/
header.header {
  position: fixed;
  width: 100%;
  top: 0;
  background-color: #fff;
  padding: 0 1.5rem;
  box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);
  transition: all 0.2s ease;
  z-index: 999;
}

header.header .maxWidth {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
}

@media (min-width: 1000px) {
  header.header .maxWidth {
    flex-wrap: nowrap;
  }
}

header.header.opened {
  box-shadow: 0 12px 25px 0 rgba(0, 0, 0, 0.1);
}

header.header.opened div.headerContainer {
  box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);
}

header.header.opened nav.nav {
  height: auto;
  padding: 1rem;
  box-shadow: none;
}

header.header.opened nav.nav ul.nav__list {
  opacity: 1;
}

header.header div.headerContainer {
  display: flex;
  width: 100%;
  justify-content: space-between;
  align-items: center;
  transition: all 0.2s ease;
}

@media (min-width: 1000px) {
  header.header div.headerContainer {
    width: auto;
  }
  header.header div.headerContainer a.header__action {
    display: none;
  }
}

header.header div.headerContainer a.header__logo {
  display: block;
  padding: 1.2rem 0;
  text-decoration: none;
  color: #252525;
  font-size: 1.3rem;
  font-weight: 600;
  transition: all 0.2s ease;
}

header.header div.headerContainer a.header__logo:hover {
  opacity: 0.5;
}

header.header div.headerContainer a.header__action {
  width: 22px;
  height: 22px;
}

header.header nav.nav {
  height: 0;
  padding: 0 1rem;
}

header.header nav.nav ul.nav__list {
  opacity: 0;
}

@media (min-width: 1000px) {
  header.header nav.nav {
    height: auto;
    padding: 0;
    box-shadow: none;
  }
  header.header nav.nav ul.nav__list {
    opacity: 1;
  }
  header.header nav.nav li.nav__item:not(:last-child) {
    padding-right: 2rem;
  }
}

/****** FOOTER ******/
footer.footer {
  background-color: #fff;
  box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.05);
  margin-top: 3rem;
  padding: 0 1.5rem;
}

@media (min-width: 1000px) {
  footer.footer {
    display: flex;
    justify-content: space-between;
  }
  footer.footer li.social__item:not(:first-child) {
    padding-left: 2rem;
  }
}

footer.footer ul.social__list {
  display: flex;
  justify-content: space-between;
  padding: 1.2rem 0;
  box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);
  width: 100%;
}

@media (min-width: 1000px) {
  footer.footer ul.social__list {
    width: auto;
  }
}

footer.footer ul.social__list a.social__link {
  display: flex;
  align-items: center;
  width: 24px;
  height: 24px;
  fill: #ABABAB;
}

footer.footer ul.social__list a.social__link svg.icon {
  transition: all 0.4s ease;
}

footer.footer .maxWidth {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
}

@media (min-width: 1000px) {
  footer.footer .maxWidth {
    flex-wrap: nowrap;
  }
}

footer.footer small.footer__copyright {
  padding: 1.2rem 0;
  font-size: 1rem;
  display: block;
  text-align: center;
}

/****** WORK ******/
ul.work__list {
  width: 100%;
}

@media (min-width: 1000px) {
  ul.work__list li.work__item {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  ul.work__list li.work__item:nth-child(even) {
    flex-direction: row-reverse;
  }
  ul.work__list li.work__item:nth-child(even) div.work__info {
    padding-left: 0;
    padding-right: 3rem;
  }
}

ul.work__list li.work__item:not(:first-child) {
  padding-top: 4rem;
}

@media (min-width: 1000px) {
  ul.work__list li.work__item:not(:first-child) {
    padding-top: 6rem;
  }
}

ul.work__list li.work__item:last-child {
  padding-bottom: 4rem;
}

@media (min-width: 1000px) {
  ul.work__list li.work__item:last-child {
    padding-bottom: 6rem;
  }
}

ul.work__list li.work__item picture {
  display: block;
}

ul.work__list li.work__item picture img {
  width: 100%;
  border-radius: 6px;
}

@media (min-width: 1000px) {
  ul.work__list li.work__item picture {
    flex-basis: 0;
    flex-grow: 1;
  }
}

@media (min-width: 1000px) {
  ul.work__list li.work__item div.work__info {
    padding-right: 0;
    padding-left: 3rem;
    flex-basis: 0;
    flex-grow: 1;
  }
}

ul.work__list li.work__item div.actions label.actions--label {
  display: block;
  font-size: 0.9rem;
  letter-spacing: 0.2px;
  font-weight: 500;
  text-transform: uppercase;
  color: #9A9A9A;
  margin-bottom: 0.4rem;
}

ul.work__list li.work__item div.buttonContainer {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}

/****** ABOUT ME ******/
img.about__image {
  border-radius: 100%;
  display: block;
  margin: 0 auto;
}

/****** BLOG ******/
main.blog header.blog__header {
  box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);
  padding-bottom: 1rem;
  margin-bottom: 2rem;
}

main.blog header.blog__header h2.blog__title {
  font-size: 1.75rem;
  margin-bottom: 1rem;
  line-height: 2rem;
}

main.blog header.blog__header span.blog__date {
  font-size: 1rem;
  font-style: italic;
  opacity: 0.5;
}

main.blog img.blog__image {
  display: block;
  width: 100%;
  border-radius: 6px;
}

/****** GENERAL ******/
* {
  box-sizing: border-box;
}

h1, h2, h3, h4, h5 {
  color: #252525;
}

ul, li {
  list-style: none;
  padding: 0;
  margin: 0;
}

body {
  font-family: Avenir Next, Avenir, "Avenir Next", -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-weight: normal;
  font-size: 17px;
  background-color: #F9F9F9;
  color: #3C3C3C;
  padding: 5rem 0 0 0;
  margin: 0;
  position: relative;
  max-width: 100vw;
}

main {
  padding: 0 1.5rem;
  max-width: 968px;
  margin: 0 auto;
}

@media (min-width: 1000px) {
  main {
    padding: 0;
  }
}

.maxWidth {
  max-width: 1100px;
  width: 100%;
  margin: 0 auto;
}

h1.title {
  font-size: 1.75rem;
}

@media (min-width: 1000px) {
  h1.title {
    font-size: 3rem;
  }
}

.subtitle {
  font-size: 1.3125rem;
  margin: 1rem 0 0;
}

@media (min-width: 1000px) {
  .subtitle {
    margin: 0;
    font-size: 2.375rem;
    line-height: 2.5rem;
  }
}

p {
  color: #3C3C3C;
  margin: 0.8rem 0 1rem;
  line-height: 1.7rem;
}

a.link {
  color: #2582FF;
  text-decoration: none;
}

a.link:hover {
  text-decoration: underline;
}

.bold {
  font-family: Avenir Next, Avenir, "Avenir Next", -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-weight: 600;
}

.italic {
  font-family: Avenir Next, Avenir, "Avenir Next", -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-style: italic;
}

.underline {
  text-decoration: underline;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
